:-module(relevance, [determination_reduction/3
		    ,clause_determinations/2
		    ,predicate_determinations/2
		    ]).

/** <module> Relevance identification and scoring.
*/

%!	determination_axiom(?Name,?Axiom) is semidet.
%
%	Describes a relation that holds between determinations.
%
determination_axiom(transitivity
		   ,(determination(X,Y):-determination(X,Z),determination(Z,Y))).


%!	determination_reduction(+Example,+Background,-Determinations) is
%!	det.
%
%	Find and reduce a set of determinations with respect to Example.
%
%	Example query:
%	==
%	?- _E = grandparent(stathis,stassa)
%	,determination_reduction(_E, [parent/2,father/2,mother/2], _Rs)
%	,print_clauses(_Rs).
%
%	determination(A,B):-determination(A,C),determination(C,B).
%	determination(grandparent/2,parent/2).
%	determination(parent/2,father/2).
%	determination(parent/2,mother/2).
%	==
%
determination_reduction(E,BK,Rs):-
	bottom_clause(E,BK,C)
	,clause_determinations(C,Ds)
	,reduced_determinations(Ds,Rs).


%!	reduced_determinations(+Determinations,+Reduced) is det.
%
%	Reduce a list of Determiations.
%
%	Determinations is a list of determinations as generated by
%	clause_determinations/2. Reduced is the union of Determinations
%	with the set of determination axioms declared in
%	determination_axiom, reduced by Plotkin's program reduction to
%	remove redundant clauses.
%
%	The result should be a minimal set of determinations of a
%	target predicate and its determinations. The target predicate is
%	the head of the Predicate-Determination term that is first in
%	the ordered list Determinations.
%
reduced_determinations(Ds,Rs):-
	determination_axiom(_,A)
	,findall(determination(P,Q)
		,member(P-Q,Ds)
		,Ds_)
	%,reduction_report([A|Ds_])
	,program_reduction([A|Ds_],Rs,_Redundant).


%!	clause_determinations(+Clause,-Determinations) is det.
%
%	Derive Determinations from a bottom Clause.
%
clause_determinations(C,Ds):-
	clause_literals(C,[L|Ls])
	,functor(L,F,A)
	% Find determinations of head literal's predicate
	,setof(F/A-S/AS
	     ,Li^Ls^AS^(member(Li,Ls)
		      ,functor(Li,S,AS)
	      )
	     ,Ds_F)
	% Find determinations of F/A's determinations
	,setof(P-D
	      ,F^AF^Ds_F^Ds_P^(member(F/AF-P,Ds_F)
			      ,predicate_determinations(P,Ds_P)
			      ,member(P-D,Ds_P)
			      )
	      ,Ds_Ds_F)
	,append(Ds_F,Ds_Ds_F,Ds_1)
	% Sort by standard order of terms to remove duplicates
	,sort(Ds_1,Ds_2)
	% Sort again by determination order
	,ordered_determinations(Ds_2, Ds).



%!	ordered_determinations(+Determinations,-Ordered) is det.
%
%	Order Determinations in	a hierarchy.
%
%	Quicksort for a list of determinations.
%
%	Determinations is a list of key-value pairs, P-Q, where P, Q are
%	predicate indicators and each value, Q, is a determination of
%	the key, P.
%
%	Ordered is the list of elements in Determinations ordered so
%	that P-Q is before R-S in Determinations iff R is a
%	determination of P.
%
%	The quicksort implementation is taken from:
%	http://kti.ms.mff.cuni.cz/~bartak/prolog/sorting.html
%
%	Changes involve passing around the starting list of
%	Determinstions to implement an ordering between predicate
%	symbols according to whether one is a determination of
%	another.
%
%	Example query:
%	==
%	?- predicate_determinations(ancestor/2,Ds),relevance:ordered_determinations(Ds,Ss).
%	Ds=[ancestor/2-ancestor/2,parent/2-mother/2,parent/2-father/2,ancestor/2-parent/2],
%	Ss=[ancestor/2-ancestor/2,ancestor/2-parent/2,parent/2-mother/2,parent/2-father/2].
%	==
%
ordered_determinations(Ds,Ss):-
	ordered_determinations(Ds,Ds,[],Ss).

%!	ordered_determinations(+Determinations,+Determinations,+Acc,-Ordered)
%!	is det.
%
%	Business end of ordered_determinations/2
%
ordered_determinations(_Ds,[],Acc,Acc):-
	!.
ordered_determinations(Ds,[P|Qs],Acc1,Ss):-
	pivot(Ds,P,Qs,Ls,Hs),
	ordered_determinations(Ds,Ls,Acc1,Acc2)
	,ordered_determinations(Ds,Hs,[P|Acc2],Ss).


%!	pivot(+Determinations,+Pivot,+Dets,-Lower,-Higher) is det.
%
%	Split Determinations around a Pivot element.
%
pivot(_Ds,_D,[],[],[]):-
	!.
pivot(Ds,P-DP,[Q-DQ|Qs],[Q-DQ|Ls],Hs):-
	equal_or_lower(Q,P,Ds)
	,!
	,pivot(Ds,P-DP,Qs,Ls,Hs).
pivot(Ds,P-DP,[Q-DQ|Qs],Ls,[Q-DQ|Hs]):-
	higher(Q,P,Ds)
	,pivot(Ds,P-DP,Qs,Ls,Hs).


%!	equal_or_lower(+P,+Q,+Determinations) is det.
%
%	True when P is equal to or lower than Q in Determinations.
%
equal_or_lower(P,P,_Ds):-
	!.
equal_or_lower(P,Q,Ds):-
	lower(P,Q,Ds).


%!	higher(+P,+Q,+Determinations) is det.
%
%	True when P is higher than Q in Determinations.
%
higher(P,Q,Ds):-
	P \= Q
	,memberchk(P-Q,Ds)
	,!.
higher(P,Q,Ds):-
	P \= Q
	,member(P-R,Ds)
	,P \= R
	,higher(R,Q,Ds).


%!	lower(+P,+Q,+Determinations) is det.
%
%	True when P is lower than Q in Determinations.
%
lower(P,Q,Ds):-
	P \= Q
	,memberchk(Q-P,Ds)
	,!.
lower(P,Q,Ds):-
	P \= Q
	,member(R-P,Ds)
	,P \= R
	,lower(R,Q,Ds).



%!	predicate_determinations(+Predicate,-Determinations) is det.
%
%	Find all Determinations of a Predicate.
%
%	Predicate is the predicate indicator of a target predicate.
%
%	Determinations is a list of key-value pairs, P-Q, where both P
%	and Q are predicate indicators: P is the predicate indicator of
%	a target predicate (which is not necessarily Predicate) and Q is
%	the predicate indicator of one determination of P.
%
%	Determinations includes key-value pairs relating Predicate to
%	each of its determinations and all the determinations of
%	Predicate to _their_ determinations.
%
%	A predicate S is a determination of a predicate T if S is
%	a literal determination of T, or if a predicate P is a
%	literal determination of S and P is a determination of T.
%
%	Or, in other words:
%	==
%	determination(S,T):-
%		literal_determination(S,T).
%	determination(S,T):-
%		literal_determination(S,P)
%		,deteramination(P,T).
%	==
%
%	Although note that this is not how predicate_determinations/2 is
%	actually defined. The nice, clean definition above does not
%	terminate when the target predicate, or one of its
%	determinations, is defined recursively. For this reason,
%	predicate_determinations/2 keeps track of determinations of a
%	target found so far and avoids adding the same one twice.
%
%	See literal_determination/2 for an explanation of what a
%	"literal determination" is.
%
predicate_determinations(P,Ds):-
	predicate_determinations(P,[],Ds).

%!	predicate_determinations(+Predicate,+Acc,-Determinations) is det.
%
%	Business end of predicate_determinations/2.
%
predicate_determinations(P,Acc1,Ds):-
	literal_determination(P,Q)
	,\+ memberchk(P-Q,Acc1)
	,!
	,predicate_determinations(Q,[P-Q|Acc1],Acc2)
	,predicate_determinations(P,Acc2,Ds).
predicate_determinations(_P,Ds,Ds).


%!	literal_determination(+Predicate,-Determination) is nondet.
%
%	Find a literal Deteramination of a Predicate.
%
%	Predicate is a predicate indicator of a target predicate.
%	Determination is the predicate indicator of a predicate that is
%	a literal determination of the target predicate.
%
%	A predicate P is a literal determination of a predicate Q iff an
%	atom of P is a literal in a clause of a definition of Q.
%
%	All literal determinations of the target predicate are generated
%	on backtracking.
%
literal_determination(P,F/A):-
	program([P],user,Ps)
	,member(C,Ps)
	,clause_literals(C,[_H|Bs])
	,member(L,Bs)
	,functor(L,F,A).
